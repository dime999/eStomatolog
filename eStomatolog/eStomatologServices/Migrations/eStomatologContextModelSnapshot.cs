// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStomatologServices;

#nullable disable

namespace eStomatologServices.Migrations
{
    [DbContext(typeof(eStomatologContext))]
    partial class eStomatologContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eStomatologModel.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VrstaUslugeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VrstaUslugeId");

                    b.ToTable("Usluga");
                });

            modelBuilder.Entity("eStomatologServices.Database.DoktorOrdinacija", b =>
                {
                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("OrdinacijaId")
                        .HasColumnType("int");

                    b.HasKey("DoktorId", "OrdinacijaId");

                    b.HasIndex("OrdinacijaId");

                    b.ToTable("DoktoriOrdinacije");

                    b.HasData(
                        new
                        {
                            DoktorId = 1,
                            OrdinacijaId = 1
                        },
                        new
                        {
                            DoktorId = 1,
                            OrdinacijaId = 2
                        },
                        new
                        {
                            DoktorId = 1,
                            OrdinacijaId = 3
                        },
                        new
                        {
                            DoktorId = 2,
                            OrdinacijaId = 1
                        },
                        new
                        {
                            DoktorId = 2,
                            OrdinacijaId = 2
                        },
                        new
                        {
                            DoktorId = 2,
                            OrdinacijaId = 3
                        },
                        new
                        {
                            DoktorId = 3,
                            OrdinacijaId = 1
                        },
                        new
                        {
                            DoktorId = 3,
                            OrdinacijaId = 2
                        },
                        new
                        {
                            DoktorId = 3,
                            OrdinacijaId = 3
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.DoktorSlika", b =>
                {
                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("SlikaId")
                        .HasColumnType("int");

                    b.HasKey("DoktorId", "SlikaId")
                        .HasName("PK_doktor_slika");

                    b.HasIndex("SlikaId");

                    b.ToTable("DoktorSlike");
                });

            modelBuilder.Entity("eStomatologServices.Database.DoktoriSpecijalizacije", b =>
                {
                    b.Property<int>("DoktorSpecijalizacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DoktorSpecijalizacijaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoktorSpecijalizacijaId"));

                    b.Property<int>("DoktorId")
                        .HasColumnType("int")
                        .HasColumnName("DoktorId");

                    b.Property<int>("SpecijalizacijaId")
                        .HasColumnType("int")
                        .HasColumnName("SpecijalizacijaId");

                    b.HasKey("DoktorSpecijalizacijaId");

                    b.HasIndex("DoktorId");

                    b.HasIndex("SpecijalizacijaId");

                    b.ToTable("DoktoriSpecijalizacije", (string)null);

                    b.HasData(
                        new
                        {
                            DoktorSpecijalizacijaId = 1,
                            DoktorId = 1,
                            SpecijalizacijaId = 1
                        },
                        new
                        {
                            DoktorSpecijalizacijaId = 4,
                            DoktorId = 1,
                            SpecijalizacijaId = 2
                        },
                        new
                        {
                            DoktorSpecijalizacijaId = 2,
                            DoktorId = 2,
                            SpecijalizacijaId = 2
                        },
                        new
                        {
                            DoktorSpecijalizacijaId = 3,
                            DoktorId = 3,
                            SpecijalizacijaId = 3
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradId");

                    b.ToTable("Gradovi", (string)null);

                    b.HasData(
                        new
                        {
                            GradId = 1,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            GradId = 2,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            GradId = 3,
                            Naziv = "Mostar"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikUlogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaId"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.HasKey("KorisnikUlogaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloge", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikUlogaId = 1,
                            DatumIzmjene = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9419),
                            KorisnikId = 1,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 2,
                            DatumIzmjene = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9458),
                            KorisnikId = 2,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 3,
                            DatumIzmjene = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9465),
                            KorisnikId = 3,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 4,
                            DatumIzmjene = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9473),
                            KorisnikId = 4,
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikUlogaId = 5,
                            DatumIzmjene = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9480),
                            KorisnikId = 5,
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikUlogaId = 6,
                            DatumIzmjene = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9489),
                            KorisnikId = 6,
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.KorisnikKartica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojKartice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatumIsteka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("VrstaKartica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_KorisnikKartica");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KorisnikKartice", (string)null);
                });

            modelBuilder.Entity("eStomatologServices.Database.Ocjene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Ocjene", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(57),
                            DoktorId = 1,
                            Ocjena = 5,
                            Opis = "Jako komunikativan doktor.",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(66),
                            DoktorId = 2,
                            Ocjena = 5,
                            Opis = "Najbolji doktor.",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(74),
                            DoktorId = 3,
                            Ocjena = 5,
                            Opis = "Jako komunikativan doktor.",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(82),
                            DoktorId = 1,
                            Ocjena = 3,
                            Opis = "Dobar doktor.",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 5,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(89),
                            DoktorId = 2,
                            Ocjena = 4,
                            Opis = "Najbolji doktor.",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 6,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(98),
                            DoktorId = 3,
                            Ocjena = 5,
                            Opis = "Jako komunikativan doktor.",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(105),
                            DoktorId = 1,
                            Ocjena = 3,
                            Opis = "Jako komunikativan doktor.",
                            PacijentId = 3
                        },
                        new
                        {
                            Id = 8,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(112),
                            DoktorId = 2,
                            Ocjena = 4,
                            Opis = "Najbolji doktor.",
                            PacijentId = 3
                        },
                        new
                        {
                            Id = 9,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(120),
                            DoktorId = 3,
                            Ocjena = 5,
                            Opis = "Jako komunikativan doktor.",
                            PacijentId = 3
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.OrdinacijaSlika", b =>
                {
                    b.Property<int>("OrdinacijaId")
                        .HasColumnType("int");

                    b.Property<int>("SlikaId")
                        .HasColumnType("int");

                    b.HasKey("OrdinacijaId", "SlikaId")
                        .HasName("PK_ordinacija_slika");

                    b.HasIndex("SlikaId");

                    b.ToTable("OrdinacijaSlike");

                    b.HasData(
                        new
                        {
                            OrdinacijaId = 1,
                            SlikaId = 1
                        },
                        new
                        {
                            OrdinacijaId = 2,
                            SlikaId = 2
                        },
                        new
                        {
                            OrdinacijaId = 3,
                            SlikaId = 3
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Ordinacije", b =>
                {
                    b.Property<int>("OrdinacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdinacijaId"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrdinacijaId");

                    b.HasIndex("GradId");

                    b.ToTable("Ordinacije");

                    b.HasData(
                        new
                        {
                            OrdinacijaId = 1,
                            Adresa = "Crkvice 40",
                            GradId = 1,
                            Naziv = "Ordinacija1",
                            Telefon = "0603422323"
                        },
                        new
                        {
                            OrdinacijaId = 2,
                            Adresa = "Crkvice 41",
                            GradId = 2,
                            Naziv = "Ordinacija2",
                            Telefon = "0603422324"
                        },
                        new
                        {
                            OrdinacijaId = 3,
                            Adresa = "Crkvice 442",
                            GradId = 3,
                            Naziv = "Ordinacija3",
                            Telefon = "0603422325"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Pacijenti__3214EC07B54830TE");

                    b.HasIndex("GradId");

                    b.HasIndex("KorisnikId")
                        .IsUnique();

                    b.ToTable("Pacijenti", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumRodjenja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            Ime = "Mobile",
                            KorisnikId = 4,
                            Prezime = "Mobile",
                            Telefon = "062222732"
                        },
                        new
                        {
                            Id = 2,
                            DatumRodjenja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 2,
                            Ime = "Enes",
                            KorisnikId = 5,
                            Prezime = "Talic",
                            Telefon = "062222732"
                        },
                        new
                        {
                            Id = 3,
                            DatumRodjenja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 3,
                            Ime = "Salih",
                            KorisnikId = 6,
                            Prezime = "Buro",
                            Telefon = "063422732"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.PacijentOrdinacija", b =>
                {
                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int>("OrdinacijaId")
                        .HasColumnType("int");

                    b.HasKey("PacijentId", "OrdinacijaId");

                    b.HasIndex("OrdinacijaId");

                    b.ToTable("PacijentiOrdinacije");

                    b.HasData(
                        new
                        {
                            PacijentId = 1,
                            OrdinacijaId = 1
                        },
                        new
                        {
                            PacijentId = 1,
                            OrdinacijaId = 2
                        },
                        new
                        {
                            PacijentId = 1,
                            OrdinacijaId = 3
                        },
                        new
                        {
                            PacijentId = 2,
                            OrdinacijaId = 1
                        },
                        new
                        {
                            PacijentId = 2,
                            OrdinacijaId = 2
                        },
                        new
                        {
                            PacijentId = 2,
                            OrdinacijaId = 3
                        },
                        new
                        {
                            PacijentId = 3,
                            OrdinacijaId = 1
                        },
                        new
                        {
                            PacijentId = 3,
                            OrdinacijaId = 2
                        },
                        new
                        {
                            PacijentId = 3,
                            OrdinacijaId = 3
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.PoklonBon", b =>
                {
                    b.Property<int>("PoklonBonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoklonBonId"));

                    b.Property<string>("BrojKartice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CvcCvvKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumIstekaKartice")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImePrezimeKorisnikaKojiKoristi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Iskoristeno")
                        .HasColumnType("bit");

                    b.Property<decimal>("IznosPlacanja")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdinacijaId")
                        .HasColumnType("int");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<bool>("Placeno")
                        .HasColumnType("bit");

                    b.HasKey("PoklonBonId")
                        .HasName("PK_PoklonBon");

                    b.HasIndex("OrdinacijaId");

                    b.HasIndex("PacijentId");

                    b.ToTable("PoklonBoni", (string)null);

                    b.HasData(
                        new
                        {
                            PoklonBonId = 1,
                            BrojKartice = "",
                            CvcCvvKod = "",
                            DatumIstekaKartice = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(26),
                            ImePrezimeKorisnikaKojiKoristi = "Adem Halilovic",
                            Iskoristeno = false,
                            IznosPlacanja = 50m,
                            Kod = "123456",
                            OrdinacijaId = 1,
                            PacijentId = 1,
                            Placeno = true
                        },
                        new
                        {
                            PoklonBonId = 2,
                            BrojKartice = "",
                            CvcCvvKod = "",
                            DatumIstekaKartice = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(38),
                            ImePrezimeKorisnikaKojiKoristi = "Adem Halilovic",
                            Iskoristeno = true,
                            IznosPlacanja = 100m,
                            Kod = "123456",
                            OrdinacijaId = 2,
                            PacijentId = 2,
                            Placeno = true
                        },
                        new
                        {
                            PoklonBonId = 3,
                            BrojKartice = "",
                            CvcCvvKod = "",
                            DatumIstekaKartice = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(46),
                            ImePrezimeKorisnikaKojiKoristi = "Adem Halilovic",
                            Iskoristeno = false,
                            IznosPlacanja = 50m,
                            Kod = "123456",
                            OrdinacijaId = 3,
                            PacijentId = 3,
                            Placeno = true
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdinacijaId")
                        .HasColumnType("int");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int>("TerminId")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaId")
                        .HasName("PK_Rezervacija");

                    b.HasIndex("DoktorId");

                    b.HasIndex("OrdinacijaId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("TerminId");

                    b.ToTable("Rezervacije");

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(170),
                            DoktorId = 1,
                            Email = "",
                            OrdinacijaId = 1,
                            PacijentId = 1,
                            TerminId = 2
                        },
                        new
                        {
                            RezervacijaId = 2,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(181),
                            DoktorId = 1,
                            Email = "",
                            OrdinacijaId = 1,
                            PacijentId = 1,
                            TerminId = 3
                        },
                        new
                        {
                            RezervacijaId = 3,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(189),
                            DoktorId = 1,
                            Email = "",
                            OrdinacijaId = 1,
                            PacijentId = 1,
                            TerminId = 4
                        },
                        new
                        {
                            RezervacijaId = 4,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(197),
                            DoktorId = 2,
                            Email = "",
                            OrdinacijaId = 2,
                            PacijentId = 2,
                            TerminId = 3
                        },
                        new
                        {
                            RezervacijaId = 5,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(205),
                            DoktorId = 2,
                            Email = "",
                            OrdinacijaId = 2,
                            PacijentId = 2,
                            TerminId = 4
                        },
                        new
                        {
                            RezervacijaId = 6,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(213),
                            DoktorId = 2,
                            Email = "",
                            OrdinacijaId = 1,
                            PacijentId = 2,
                            TerminId = 5
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Slika", b =>
                {
                    b.Property<int>("SlikaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikaId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlikaId");

                    b.ToTable("Slike");

                    b.HasData(
                        new
                        {
                            SlikaId = 1,
                            Path = "C:\\Code\\FIT-RS2-2023\\eStomatolog\\eStomatolog\\images/klinika1232424109.jpg"
                        },
                        new
                        {
                            SlikaId = 2,
                            Path = "C:\\Code\\FIT-RS2-2023\\eStomatolog\\eStomatolog\\images/klinika2232404361.jpg"
                        },
                        new
                        {
                            SlikaId = 3,
                            Path = "C:\\Code\\FIT-RS2-2023\\eStomatolog\\eStomatolog\\images/klinika2232321330.jpg"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Specijalizacija", b =>
                {
                    b.Property<int>("SpecijalizacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecijalizacijaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecijalizacijaId");

                    b.ToTable("Specijalizacije");

                    b.HasData(
                        new
                        {
                            SpecijalizacijaId = 1,
                            Naziv = "Oralna hirurgija"
                        },
                        new
                        {
                            SpecijalizacijaId = 2,
                            Naziv = "Ortodoncija"
                        },
                        new
                        {
                            SpecijalizacijaId = 3,
                            Naziv = "Endodoncija"
                        },
                        new
                        {
                            SpecijalizacijaId = 4,
                            Naziv = "Parodontologija"
                        },
                        new
                        {
                            SpecijalizacijaId = 5,
                            Naziv = "Oralna patologija"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Administrator",
                            Opis = "Administrator"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Korisnik",
                            Opis = "Korisnik"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Database.VrstaUsluge", b =>
                {
                    b.Property<int>("VrstaUslugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VrstaUslugeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaUslugeId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VrstaUslugeId");

                    b.ToTable("VrstaUsluge");
                });

            modelBuilder.Entity("eStomatologServices.Models.Dijagnoza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int")
                        .HasColumnName("DoktorID");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int")
                        .HasColumnName("PacijentID");

                    b.HasKey("Id")
                        .HasName("PK_Dijagnoza");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Dijagnoze", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 429, DateTimeKind.Local).AddTicks(9994),
                            DoktorId = 1,
                            Opis = "Pacijent je podvrgnut rutinskom stomatološkom pregledu koji obuhvatao vizuelni pregled oralne šupljine i rendgenske snimke zuba. Uočena je prisutnost karijesa na donjim kutnjacima, s preporukom za plombiranje zahvaćenih površina.",
                            PacijentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(7),
                            DoktorId = 2,
                            Opis = "Pacijent je podvrgnut rutinskom stomatološkom pregledu koji obuhvatao vizuelni pregled oralne šupljine i rendgenske snimke zuba. Uočena je prisutnost karijesa na donjim kutnjacima, s preporukom za plombiranje zahvaćenih površina.",
                            PacijentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Datum = new DateTime(2023, 11, 19, 1, 12, 44, 430, DateTimeKind.Local).AddTicks(15),
                            DoktorId = 3,
                            Opis = "Pacijent je podvrgnut rutinskom stomatološkom pregledu koji obuhvatao vizuelni pregled oralne šupljine i rendgenske snimke zuba. Uočena je prisutnost karijesa na donjim kutnjacima, s preporukom za plombiranje zahvaćenih površina.",
                            PacijentId = 3
                        });
                });

            modelBuilder.Entity("eStomatologServices.Models.Doktor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Doktori__3214EC07B54830FE");

                    b.HasIndex("GradId");

                    b.HasIndex("KorisnikId")
                        .IsUnique();

                    b.ToTable("Doktori", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradId = 1,
                            Ime = "Desktop",
                            KorisnikId = 1,
                            Prezime = "Desktop"
                        },
                        new
                        {
                            Id = 2,
                            GradId = 2,
                            Ime = "Adem",
                            KorisnikId = 2,
                            Prezime = "Halilovic"
                        },
                        new
                        {
                            Id = 3,
                            GradId = 3,
                            Ime = "Kenan",
                            KorisnikId = 3,
                            Prezime = "Cosic"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Models.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("KorisnikId");

                    b.HasIndex(new[] { "Email" }, "CS_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "KorisnickoIme" }, "CS_KorisnickoIme")
                        .IsUnique();

                    b.ToTable("Korisnik", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            Email = "desktop.desktop@example.com",
                            Ime = "Desktop",
                            KorisnickoIme = "desktop",
                            LozinkaHash = "PQ570hFK9Bu43Qw4qZ2wLAisk4c=",
                            LozinkaSalt = "RDcOKBdT86HOJAuigS+J0A==",
                            Prezime = "Desktop",
                            Status = true,
                            Telefon = "0622227892"
                        },
                        new
                        {
                            KorisnikId = 2,
                            Email = "adem.halilovic@gmail.com",
                            Ime = "Adem",
                            KorisnickoIme = "adem",
                            LozinkaHash = "PQ570hFK9Bu43Qw4qZ2wLAisk4c=",
                            LozinkaSalt = "RDcOKBdT86HOJAuigS+J0A==",
                            Prezime = "Halilovic",
                            Status = true,
                            Telefon = "0622227892"
                        },
                        new
                        {
                            KorisnikId = 3,
                            Email = "kenan.cosic@gmail.com",
                            Ime = "Kenan",
                            KorisnickoIme = "kenan",
                            LozinkaHash = "PQ570hFK9Bu43Qw4qZ2wLAisk4c=",
                            LozinkaSalt = "RDcOKBdT86HOJAuigS+J0A==",
                            Prezime = "Cosic",
                            Status = true,
                            Telefon = "0622527892"
                        },
                        new
                        {
                            KorisnikId = 4,
                            Email = "mobile.mobile@example.com",
                            Ime = "Mobile",
                            KorisnickoIme = "mobile",
                            LozinkaHash = "PQ570hFK9Bu43Qw4qZ2wLAisk4c=",
                            LozinkaSalt = "RDcOKBdT86HOJAuigS+J0A==",
                            Prezime = "Mobile",
                            Status = true,
                            Telefon = "0622227822"
                        },
                        new
                        {
                            KorisnikId = 5,
                            Email = "enes.talic@gmail.com",
                            Ime = "Enes",
                            KorisnickoIme = "enes",
                            LozinkaHash = "PQ570hFK9Bu43Qw4qZ2wLAisk4c=",
                            LozinkaSalt = "RDcOKBdT86HOJAuigS+J0A==",
                            Prezime = "Talic",
                            Status = true,
                            Telefon = "0627877822"
                        },
                        new
                        {
                            KorisnikId = 6,
                            Email = "salih.buro@gmail.com",
                            Ime = "Salih",
                            KorisnickoIme = "salih",
                            LozinkaHash = "PQ570hFK9Bu43Qw4qZ2wLAisk4c=",
                            LozinkaSalt = "RDcOKBdT86HOJAuigS+J0A==",
                            Prezime = "Buro",
                            Status = true,
                            Telefon = "062765822"
                        });
                });

            modelBuilder.Entity("eStomatologServices.Models.Termin", b =>
                {
                    b.Property<int>("TerminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TerminId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerminId"));

                    b.Property<DateTime>("Vrijeme")
                        .HasColumnType("datetime")
                        .HasColumnName("Vrijeme");

                    b.HasKey("TerminId")
                        .HasName("PK_Termini");

                    b.ToTable("Termini", (string)null);

                    b.HasData(
                        new
                        {
                            TerminId = 1,
                            Vrijeme = new DateTime(1900, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 2,
                            Vrijeme = new DateTime(1900, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 3,
                            Vrijeme = new DateTime(1900, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 4,
                            Vrijeme = new DateTime(1900, 1, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 5,
                            Vrijeme = new DateTime(1900, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 6,
                            Vrijeme = new DateTime(1900, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 7,
                            Vrijeme = new DateTime(1900, 1, 1, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 8,
                            Vrijeme = new DateTime(1900, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 9,
                            Vrijeme = new DateTime(1900, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 10,
                            Vrijeme = new DateTime(1900, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 11,
                            Vrijeme = new DateTime(1900, 1, 1, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 12,
                            Vrijeme = new DateTime(1900, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 13,
                            Vrijeme = new DateTime(1900, 1, 1, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 14,
                            Vrijeme = new DateTime(1900, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 15,
                            Vrijeme = new DateTime(1900, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 16,
                            Vrijeme = new DateTime(1900, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TerminId = 17,
                            Vrijeme = new DateTime(1900, 1, 1, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eStomatologServices.Models.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__Usluge__3214EC07FCE82835");

                    b.ToTable("Usluge", (string)null);
                });

            modelBuilder.Entity("eStomatologModel.Usluga", b =>
                {
                    b.HasOne("eStomatologServices.Database.VrstaUsluge", null)
                        .WithMany("Usluge")
                        .HasForeignKey("VrstaUslugeId");
                });

            modelBuilder.Entity("eStomatologServices.Database.DoktorOrdinacija", b =>
                {
                    b.HasOne("eStomatologServices.Models.Doktor", "Doktor")
                        .WithMany("DoktorOrdinacije")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Ordinacije", "Ordinacija")
                        .WithMany()
                        .HasForeignKey("OrdinacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Ordinacija");
                });

            modelBuilder.Entity("eStomatologServices.Database.DoktorSlika", b =>
                {
                    b.HasOne("eStomatologServices.Models.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Slika", "Slika")
                        .WithMany()
                        .HasForeignKey("SlikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Slika");
                });

            modelBuilder.Entity("eStomatologServices.Database.DoktoriSpecijalizacije", b =>
                {
                    b.HasOne("eStomatologServices.Models.Doktor", "Doktor")
                        .WithMany("DoktoriSpecijalizacije")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Specijalizacija", "Specijalizacija")
                        .WithMany()
                        .HasForeignKey("SpecijalizacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Specijalizacija");
                });

            modelBuilder.Entity("eStomatologServices.Database.KorisniciUloge", b =>
                {
                    b.HasOne("eStomatologServices.Models.Korisnik", "Korisnik")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciUloge_Korisnici");

                    b.HasOne("eStomatologServices.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciUloge_Uloge");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eStomatologServices.Database.KorisnikKartica", b =>
                {
                    b.HasOne("eStomatologServices.Models.Korisnik", "Korisnik")
                        .WithMany("KorisnikKartice")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eStomatologServices.Database.Ocjene", b =>
                {
                    b.HasOne("eStomatologServices.Models.Doktor", "Doktor")
                        .WithMany("Ocjene")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Pacijent", "Pacijent")
                        .WithMany("Ocjene")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eStomatologServices.Database.OrdinacijaSlika", b =>
                {
                    b.HasOne("eStomatologServices.Database.Ordinacije", "Ordinacija")
                        .WithMany()
                        .HasForeignKey("OrdinacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Slika", "Slika")
                        .WithMany("OrdinacijaSlike")
                        .HasForeignKey("SlikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordinacija");

                    b.Navigation("Slika");
                });

            modelBuilder.Entity("eStomatologServices.Database.Ordinacije", b =>
                {
                    b.HasOne("eStomatologServices.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eStomatologServices.Database.Pacijent", b =>
                {
                    b.HasOne("eStomatologServices.Database.Grad", "Grad")
                        .WithMany("Pacijenti")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Models.Korisnik", "Korisnik")
                        .WithOne()
                        .HasForeignKey("eStomatologServices.Database.Pacijent", "KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eStomatologServices.Database.PacijentOrdinacija", b =>
                {
                    b.HasOne("eStomatologServices.Database.Ordinacije", "Ordinacija")
                        .WithMany()
                        .HasForeignKey("OrdinacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Pacijent", "Pacijnet")
                        .WithMany("PacijentOrdinacije")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordinacija");

                    b.Navigation("Pacijnet");
                });

            modelBuilder.Entity("eStomatologServices.Database.PoklonBon", b =>
                {
                    b.HasOne("eStomatologServices.Database.Ordinacije", "Ordinacija")
                        .WithMany("PoklonBonovi")
                        .HasForeignKey("OrdinacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Pacijent", "Pacijent")
                        .WithMany("PoklonBonovi")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordinacija");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eStomatologServices.Database.Rezervacija", b =>
                {
                    b.HasOne("eStomatologServices.Models.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Ordinacije", "Ordinacija")
                        .WithMany()
                        .HasForeignKey("OrdinacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Models.Termin", "Termin")
                        .WithMany()
                        .HasForeignKey("TerminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Ordinacija");

                    b.Navigation("Pacijent");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("eStomatologServices.Models.Dijagnoza", b =>
                {
                    b.HasOne("eStomatologServices.Models.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("eStomatologServices.Models.Doktor", b =>
                {
                    b.HasOne("eStomatologServices.Database.Grad", "Grad")
                        .WithMany("Doktori")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eStomatologServices.Models.Korisnik", "Korisnik")
                        .WithOne()
                        .HasForeignKey("eStomatologServices.Models.Doktor", "KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eStomatologServices.Database.Grad", b =>
                {
                    b.Navigation("Doktori");

                    b.Navigation("Pacijenti");
                });

            modelBuilder.Entity("eStomatologServices.Database.Ordinacije", b =>
                {
                    b.Navigation("PoklonBonovi");
                });

            modelBuilder.Entity("eStomatologServices.Database.Pacijent", b =>
                {
                    b.Navigation("Ocjene");

                    b.Navigation("PacijentOrdinacije");

                    b.Navigation("PoklonBonovi");
                });

            modelBuilder.Entity("eStomatologServices.Database.Slika", b =>
                {
                    b.Navigation("OrdinacijaSlike");
                });

            modelBuilder.Entity("eStomatologServices.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloges");
                });

            modelBuilder.Entity("eStomatologServices.Database.VrstaUsluge", b =>
                {
                    b.Navigation("Usluge");
                });

            modelBuilder.Entity("eStomatologServices.Models.Doktor", b =>
                {
                    b.Navigation("DoktorOrdinacije");

                    b.Navigation("DoktoriSpecijalizacije");

                    b.Navigation("Ocjene");
                });

            modelBuilder.Entity("eStomatologServices.Models.Korisnik", b =>
                {
                    b.Navigation("KorisniciUloges");

                    b.Navigation("KorisnikKartice");
                });
#pragma warning restore 612, 618
        }
    }
}
